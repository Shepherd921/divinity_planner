#!/usr/bin/env node

const scraper = require('../lib')
const config = require('../config')
const program = require('commander')
const yaml = require('node-yaml')
const path = require('path')
const fs = require('fs')
const root = path.resolve(__dirname, '..')

const loadRequestedSkillData = () => {
  return scraper.loadSkillData({
    filePath: path.join(program.input, config.assets.SkillData)
  });
}

program
  .option(
    '-i, --input [path]',
    'Path to the extracted Shared.pak archive.',
    path.join(root, config.archives.Shared)
  )
;

program
  .command('query <property>')
  .option('-u, --uniq')
  .option('-c, --count')
  .option('-r, --root')
  .option('--present')
  .action(function(property, params) {
    const skillData = scraper.parseSkillData(loadRequestedSkillData());

    scraper.cli.query(skillData, property, params)
  })
;

program
  .command('extract')
  .option('-i, --input [path]', 'Path to the extracted Shared.pak archive.',
    path.join(root, config.archives.Shared)
  )
  .option('-o, --output [path]', 'Path to the generated file.',
    path.join(root, 'db/00-database.yml')
  )
  .action(function(params) {
    const skillData = scraper.parseSkillData(loadRequestedSkillData());

    fs.writeFileSync(params.output, yaml.dump(scraper.cli.extract(skillData)), 'utf8');
  })
;

program.parse(process.argv)
